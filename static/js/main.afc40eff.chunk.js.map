{"version":3,"sources":["reportWebVitals.js","core/config.js","core/context.js","core/actions.js","core/seed.js","components/treasure-box/innerBoxes.js","components/treasure-box/selectBox.js","components/treasure-box/index.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","config","randomNumber","Math","floor","random","boxTheme","context","actions","setTheme","theme","data","seed","colorNumbers","boxes","variable","className","state","InnerBoxes","selectBox","name","value","onChange","evt","target","map","TreasureBox","App","Entry","useState","setState","updateContext","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAYeA,EAZS,SAACC,GACrBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC5DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gBCAIQ,G,iBALA,CACdC,aAAcC,KAAKC,MAHA,GAGMD,KAAKE,UAA0B,EACxDC,SAAU,CAAC,QAAS,aCMNC,EANC,CACfC,QCDe,CACfC,SALgB,SAAC,GAAD,MAAe,CAC/BC,MADgB,EAAGC,QDMnBV,SACAW,KELY,CACZF,MAAOT,EAAOK,SAAS,K,OCChBJ,EAAiBD,EAAjBC,aAEFW,EAAe,CACpB,MACA,MACA,QACA,OACA,OACA,MACA,QACA,QACA,OACA,OAIKC,EAAQ,SAARA,EAASC,GAAD,OACb,qBAGCC,UAAS,uBAAoBT,EAAQU,MAAMP,MAAlC,YAAqE,UAAxBH,EAAQU,MAAMP,MAAoBK,EAAW,IAAM,EAAI,MAAQ,MAAQF,EAAaE,EAAW,GAA5I,KAHV,SAKgB,IAAbA,EACCb,EACAY,EAAMC,EAAW,MAOPG,EAHI,kBAClBJ,EAAMZ,ICbQiB,EAhBG,kBACjB,wBACCH,UAAU,eACVI,KAAK,YACLC,MAAQd,EAAQU,MAAMP,MACtBY,SAAW,SAACC,GAAD,OAAShB,EAAQC,QAAQC,SAASc,EAAIC,OAAOH,QAJzD,SAMGd,EAAQN,OAAOK,SAASmB,KAAI,SAACf,GAAD,OAC7B,wBAECW,MAAQX,EAFT,SAIGA,GAHIA,SCGMgB,EATI,kBACnB,gCACC,8BAAOP,MACP,qBAAKH,UAAU,gBAAf,SACGE,UCAUS,EANH,kBACX,qBAAKX,UAAU,MAAf,SACGU,OCCEE,EAAQ,WACb,MAA0BC,mBAAStB,EAAQK,MAA3C,mBAAOK,EAAP,KAAca,EAAd,KAIA,OAFAC,IAAcxB,EAAS,CAAEU,QAAOa,aAEzBH,EAAIpB,IAGZyB,IAASC,OAAO,cAAC,IAAMC,WAAP,UACf,cAAC,EAAD,MAEDC,SAASC,eAAe,SAKxB5C,K","file":"static/js/main.afc40eff.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n\tif(onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","const numberCount = 10;\n\nconst config = {\n\trandomNumber: Math.floor(Math.random() * numberCount) + 1,\n\tboxTheme: ['zebra', 'rainbow'],\n};\n\nexport default config;\n","import actions from './actions';\nimport config from './config';\nimport seed from './seed';\n\nconst context = {\n\tactions,\n\tconfig,\n\tseed,\n};\n\nexport default context;\n","const setTheme = ({ data }) => ({\n\ttheme: data,\n});\n\nconst actions = {\n\tsetTheme,\n};\n\nexport default actions;\n","import config from './config';\n\nconst seed = {\n\ttheme: config.boxTheme[0],\n};\n\nexport default seed;\n","import { React } from 'react';\nimport config from '../../core/config';\nimport context from '../../core/context';\n\nconst { randomNumber } = config;\n\nconst colorNumbers = [\n\t'one',\n\t'two',\n\t'three',\n\t'four',\n\t'five',\n\t'six',\n\t'seven',\n\t'eight',\n\t'nine',\n\t'ten',\n];\n\n// eslint-disable-next-line complexity\nconst boxes = (variable) =>\n\t<div\n\t\t// key={ (fixed - variable) + 1 }\n\t\t// eslint-disable-next-line no-magic-numbers\n\t\tclassName={ `treasure-box ${ context.state.theme }-${ context.state.theme === 'zebra' ? variable % 2 !== 0 ? 'one' : 'two' : colorNumbers[variable - 1] } ` }\n\t>\n\t\t{ variable === 1\n\t\t\t? randomNumber\n\t\t\t: boxes(variable - 1) }\n\t</div>\n;\n\nconst InnerBoxes = () =>\n\tboxes(randomNumber);\n\nexport default InnerBoxes;\n","import { React } from 'react';\nimport './style.css';\nimport context from '../../core/context';\n\nconst selectBox = () =>\n\t<select\n\t\tclassName=\"select-style\"\n\t\tname=\"selectBox\"\n\t\tvalue={ context.state.theme }\n\t\tonChange={ (evt) => context.actions.setTheme(evt.target.value) }\n\t>\n\t\t{ context.config.boxTheme.map((theme) =>\n\t\t\t<option\n\t\t\t\tkey={ theme }\n\t\t\t\tvalue={ theme }\n\t\t\t>\n\t\t\t\t{ theme }\n\t\t\t</option>) }\n\t</select>;\n\nexport default selectBox;\n","import { React } from 'react';\nimport './style.css';\nimport InnerBoxes from './innerBoxes';\nimport selectBox from './selectBox';\n\n\n\nconst TreasureBox = () =>\n\t<div>\n\t\t<div>{ selectBox() }</div>\n\t\t<div className=\"container-box\">\n\t\t\t{ InnerBoxes() }\n\t\t</div>\n\t</div>;\n\n\n\texport default TreasureBox;\n","import { React } from 'react';\nimport './App.css';\n// import LogoPane from './components/logo';\nimport TreasureBox from './components/treasure-box';\n\nconst App = () =>\n\t<div className=\"App\">\n\t\t{ TreasureBox() }\n\t</div>\n;\n\nexport default App;\n\n// { LogoPane() }\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport updateContext from '@laufire/resist';\nimport './index.css';\nimport App from './App';\nimport context from './core/context';\n\nconst Entry = () => {\n\tconst [state, setState] = useState(context.seed);\n\n\tupdateContext(context, { state, setState });\n\n\treturn App(context);\n};\n\nReactDOM.render(<React.StrictMode>\n\t<Entry/>\n</React.StrictMode>,\ndocument.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}